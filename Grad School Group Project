{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# MSDS 460 Final Project\n",
        "\n",
        "Adam Tierney, Leovic Moreno, Sebastian Ricketts, and Michael Christianson  \n",
        "MSDS 460: Decision Analytics  \n",
        "Professor Joe Wilck  \n",
        "December 4, 2022\n",
        "\n",
        "This notebook will contain the optimization code needed for our final project."
      ],
      "metadata": {
        "id": "emrzf5QmBnSw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Code Setup"
      ],
      "metadata": {
        "id": "XDitgznZCpVe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Package Preparation\n",
        "\n",
        "Install and import all modules needed to optimize our problem."
      ],
      "metadata": {
        "id": "ekf1IvVeXULP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install PuLP==2.6.0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iZkDzE0w7hQV",
        "outputId": "a3bb1a5f-a854-4f78-d1e8-40d217624cff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: PuLP==2.6.0 in /usr/local/lib/python3.7/dist-packages (2.6.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!apt-get install -y -qq glpk-utils"
      ],
      "metadata": {
        "id": "vE3iE5WSKJ48"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import auth, drive\n",
        "from itertools import product\n",
        "import os\n",
        "import pandas as pd\n",
        "from pprint import pprint\n",
        "from pulp import *\n",
        "import requests"
      ],
      "metadata": {
        "id": "_8OplyOo3d3g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Google Drive Setup\n",
        "\n",
        "The following code setup up the connection to Google Drive for inputs and outputs."
      ],
      "metadata": {
        "id": "iu7EbcuKYR5R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "Mn2vQwv68Ra7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c57772e9-9d65-4623-9c73-42de832597d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The following cell contains several helper functions for the optimization problem."
      ],
      "metadata": {
        "id": "XsbEmmItDCy1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# This function identifies the user of this Colab notebook. This is useful when determining where the data and code for this project are stored.\n",
        "def get_user_email():\n",
        "  gcloud_token = !gcloud auth print-access-token\n",
        "  gcloud_tokeninfo = requests.get('https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=' + gcloud_token[0]).json()\n",
        "  return gcloud_tokeninfo['email']"
      ],
      "metadata": {
        "id": "s5iZvgaD7cFm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The following cell mounts Google drive to the local file system so we can interact with it. "
      ],
      "metadata": {
        "id": "PZMdGoZ5DaAN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "drive.mount('/content/drive')\n",
        "auth.authenticate_user()"
      ],
      "metadata": {
        "id": "5K83o-Hr-C2I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d75ed931-5350-4054-e3a0-8615e593810e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Each team member might keep the shared folder for our data and code in a different place inside Google drive. This cell will direct Colab to the correct place based on the user. "
      ],
      "metadata": {
        "id": "Ya4dQd_n5S09"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Group Access \n",
        "# This dictionary is used to map the user to their corresponding Google drive folder that stores their code.\n",
        "WORKING_DIRECTORY_DICT = {\n",
        "    \"mikedc94@gmail.com\": \"/content/drive/MyDrive/Education/School Work/Data Science Masters/MSDS 460 - Decision Analytics/MSDS 460 Final Project/Data and Code/\",\n",
        "    \"leovicmoreno2023@u.northwestern.edu\": \"/content/drive/MyDrive/MSDS 460 Final Project/Data and Code/\",\n",
        "    \"adamtierney2024@u.northwestern.edu\": \"/content/drive/MyDrive/MSDS 460 Final Project/Data and Code/\",\n",
        "    \"sebastianricketts2025@u.northwestern.edu\": \"/content/drive/MyDrive/MSDS460/MSDS 460 Final Project/Data and Code/\"\n",
        "}\n",
        "\n",
        "email = get_user_email()\n",
        "os.chdir(WORKING_DIRECTORY_DICT[email])\n",
        "print(f\"Working directory set to: {os.getcwd()}\")"
      ],
      "metadata": {
        "id": "kO1Z53Wu5Ryw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "575df2b2-95e4-4973-843e-f1359a44fb43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Working directory set to: /content/drive/MyDrive/Education/School Work/Data Science Masters/MSDS 460 - Decision Analytics/MSDS 460 Final Project/Data and Code\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problem Setup"
      ],
      "metadata": {
        "id": "W65p76m_Ct_m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Problem Inputs and Constants"
      ],
      "metadata": {
        "id": "SbZam8P7xu81"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "The following cell contains several constants. Most of the constants store inputs from the problem setup with obvious names."
      ],
      "metadata": {
        "id": "hh-aocaRxxEB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ITEMS = ['Widgets', 'Gadgets', 'Flugels']\n",
        "PERIODS = [1, 2, 3, 4, 5]\n",
        "PLANTS = ['A', 'B']\n",
        "LABOR_TYPES = ['Regular', 'Overtime']\n",
        "MATERIAL_TYPES = ['Material 1', 'Material 2']\n",
        "LABOR_LIMITS = {\n",
        "    'A': 2500,\n",
        "    'B': 3800\n",
        "}\n",
        "INVENTORY_LIMITS = {\n",
        "    'A': 70,\n",
        "    'B': 50\n",
        "}\n",
        "MARKETING_COST_PER_EXTRA_UNIT = {\n",
        "    'Widgets': 160, \n",
        "    'Gadgets': 120, \n",
        "    'Flugels': 180\n",
        "}\n",
        "MATERIALS_LIMITS = {\n",
        "    'Material 1': 70*2000,\n",
        "    \"Material 2\": 2.5*2000\n",
        "}\n",
        "SALES_PRICES = {\n",
        "    'Widgets': 2490,\n",
        "    'Gadgets': 1990,\n",
        "    'Flugels': 2970\n",
        "}\n",
        "MATERIAL_COSTS = {\n",
        "    'A': {\n",
        "        \"Material 1\": 1.25,\n",
        "        \"Material 2\": 2.65\n",
        "    },\n",
        "    'B': {\n",
        "        \"Material 1\": 1.45,\n",
        "        \"Material 2\": 2.9\n",
        "    }\n",
        "}"
      ],
      "metadata": {
        "id": "fez43H777zo-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are several more complicated problem inputs that are easier to store in Excel. We will read those in here so they can be used elsewhere in the problem."
      ],
      "metadata": {
        "id": "v5dioWowYf3y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Item Costs"
      ],
      "metadata": {
        "id": "RM00EKwBY1km"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "item_costs_df = pd.read_excel(\"ProblemInputs.xlsx\", sheet_name='ITEM_COSTS')\n",
        "item_costs_df"
      ],
      "metadata": {
        "id": "3X7a_-9YPYUK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "outputId": "20c82744-5f09-45c6-912d-a3b50d7b15bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      item plant  Material 1  Material 2  labor hours  inventory cost  \\\n",
              "0  Widgets     A         194         8.6          9.5             7.5   \n",
              "1  Gadgets     A         230         0.0          7.1             5.5   \n",
              "2  Flugels     A         178        11.6         11.1             6.5   \n",
              "3  Widgets     B         188         9.2          9.1             7.8   \n",
              "4  Gadgets     B         225         0.0          7.8             5.7   \n",
              "5  Flugels     B         170        10.8         10.6             7.0   \n",
              "\n",
              "   transportation cost  \n",
              "0                  6.3  \n",
              "1                  4.6  \n",
              "2                  5.5  \n",
              "3                  6.5  \n",
              "4                  5.0  \n",
              "5                  5.7  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c0a380f4-90f8-4bab-b6a1-eaf2ce55d68a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item</th>\n",
              "      <th>plant</th>\n",
              "      <th>Material 1</th>\n",
              "      <th>Material 2</th>\n",
              "      <th>labor hours</th>\n",
              "      <th>inventory cost</th>\n",
              "      <th>transportation cost</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Widgets</td>\n",
              "      <td>A</td>\n",
              "      <td>194</td>\n",
              "      <td>8.6</td>\n",
              "      <td>9.5</td>\n",
              "      <td>7.5</td>\n",
              "      <td>6.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Gadgets</td>\n",
              "      <td>A</td>\n",
              "      <td>230</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.1</td>\n",
              "      <td>5.5</td>\n",
              "      <td>4.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Flugels</td>\n",
              "      <td>A</td>\n",
              "      <td>178</td>\n",
              "      <td>11.6</td>\n",
              "      <td>11.1</td>\n",
              "      <td>6.5</td>\n",
              "      <td>5.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Widgets</td>\n",
              "      <td>B</td>\n",
              "      <td>188</td>\n",
              "      <td>9.2</td>\n",
              "      <td>9.1</td>\n",
              "      <td>7.8</td>\n",
              "      <td>6.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Gadgets</td>\n",
              "      <td>B</td>\n",
              "      <td>225</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.8</td>\n",
              "      <td>5.7</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Flugels</td>\n",
              "      <td>B</td>\n",
              "      <td>170</td>\n",
              "      <td>10.8</td>\n",
              "      <td>10.6</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5.7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0a380f4-90f8-4bab-b6a1-eaf2ce55d68a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c0a380f4-90f8-4bab-b6a1-eaf2ce55d68a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c0a380f4-90f8-4bab-b6a1-eaf2ce55d68a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 226
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "item_costs_dict = {}\n",
        "for plant_item_index, cost_dict in item_costs_df.set_index(['plant', 'item']).to_dict('index').items():\n",
        "  curr_plant, curr_item = plant_item_index\n",
        "  if curr_plant not in item_costs_dict:\n",
        "    item_costs_dict[curr_plant] = {}\n",
        "  item_costs_dict[curr_plant][curr_item] = cost_dict\n",
        "pprint(item_costs_dict)"
      ],
      "metadata": {
        "id": "r-eAv2ffPpoy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f95921a5-9f1e-4eb7-8bae-6f3b66954dde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'A': {'Flugels': {'Material 1': 178,\n",
            "                   'Material 2': 11.6,\n",
            "                   'inventory cost': 6.5,\n",
            "                   'labor hours': 11.1,\n",
            "                   'transportation cost': 5.5},\n",
            "       'Gadgets': {'Material 1': 230,\n",
            "                   'Material 2': 0.0,\n",
            "                   'inventory cost': 5.5,\n",
            "                   'labor hours': 7.1,\n",
            "                   'transportation cost': 4.6},\n",
            "       'Widgets': {'Material 1': 194,\n",
            "                   'Material 2': 8.6,\n",
            "                   'inventory cost': 7.5,\n",
            "                   'labor hours': 9.5,\n",
            "                   'transportation cost': 6.3}},\n",
            " 'B': {'Flugels': {'Material 1': 170,\n",
            "                   'Material 2': 10.8,\n",
            "                   'inventory cost': 7.0,\n",
            "                   'labor hours': 10.6,\n",
            "                   'transportation cost': 5.7},\n",
            "       'Gadgets': {'Material 1': 225,\n",
            "                   'Material 2': 0.0,\n",
            "                   'inventory cost': 5.7,\n",
            "                   'labor hours': 7.8,\n",
            "                   'transportation cost': 5.0},\n",
            "       'Widgets': {'Material 1': 188,\n",
            "                   'Material 2': 9.2,\n",
            "                   'inventory cost': 7.8,\n",
            "                   'labor hours': 9.1,\n",
            "                   'transportation cost': 6.5}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Demand Requirements"
      ],
      "metadata": {
        "id": "pj2HsHV4ZJER"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "demand_requirements_df = pd.read_excel(\"ProblemInputs.xlsx\", sheet_name='DEMAND_REQUIREMENT').melt(id_vars=['item'], var_name='period', value_name='demand')\n",
        "demand_requirements_df"
      ],
      "metadata": {
        "id": "DflZ3R63hnl7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "outputId": "9d5e17fd-cf0c-4e04-c68b-c1c9fbba0d04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       item period  demand\n",
              "0   Widgets      1      70\n",
              "1   Gadgets      1     200\n",
              "2   Flugels      1     140\n",
              "3   Widgets      2     125\n",
              "4   Gadgets      2     300\n",
              "5   Flugels      2     175\n",
              "6   Widgets      3     185\n",
              "7   Gadgets      3     295\n",
              "8   Flugels      3     205\n",
              "9   Widgets      4     190\n",
              "10  Gadgets      4     245\n",
              "11  Flugels      4     235\n",
              "12  Widgets      5     200\n",
              "13  Gadgets      5     240\n",
              "14  Flugels      5     230"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d12fe2d-f3d7-4a15-8322-56e77778030b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item</th>\n",
              "      <th>period</th>\n",
              "      <th>demand</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Widgets</td>\n",
              "      <td>1</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Gadgets</td>\n",
              "      <td>1</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Flugels</td>\n",
              "      <td>1</td>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Widgets</td>\n",
              "      <td>2</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Gadgets</td>\n",
              "      <td>2</td>\n",
              "      <td>300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Flugels</td>\n",
              "      <td>2</td>\n",
              "      <td>175</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Widgets</td>\n",
              "      <td>3</td>\n",
              "      <td>185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Gadgets</td>\n",
              "      <td>3</td>\n",
              "      <td>295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Flugels</td>\n",
              "      <td>3</td>\n",
              "      <td>205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Widgets</td>\n",
              "      <td>4</td>\n",
              "      <td>190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Gadgets</td>\n",
              "      <td>4</td>\n",
              "      <td>245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Flugels</td>\n",
              "      <td>4</td>\n",
              "      <td>235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Widgets</td>\n",
              "      <td>5</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Gadgets</td>\n",
              "      <td>5</td>\n",
              "      <td>240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Flugels</td>\n",
              "      <td>5</td>\n",
              "      <td>230</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d12fe2d-f3d7-4a15-8322-56e77778030b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2d12fe2d-f3d7-4a15-8322-56e77778030b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2d12fe2d-f3d7-4a15-8322-56e77778030b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 284
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "demand_requirements_dict = {}\n",
        "for item_period_index, demand_dict in demand_requirements_df.set_index(['item', 'period']).to_dict('index').items():\n",
        "  item, period = item_period_index\n",
        "  if item not in demand_requirements_dict:\n",
        "    demand_requirements_dict[item] = {}\n",
        "  demand_requirements_dict[item][period] = demand_dict['demand']\n",
        "demand_requirements_dict"
      ],
      "metadata": {
        "id": "eEjO9aOUh0y6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "990b2bf0-bbca-4d64-a887-6bb2b2fb790d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Widgets': {1: 70, 2: 125, 3: 185, 4: 190, 5: 200},\n",
              " 'Gadgets': {1: 200, 2: 300, 3: 295, 4: 245, 5: 240},\n",
              " 'Flugels': {1: 140, 2: 175, 3: 205, 4: 235, 5: 230}}"
            ]
          },
          "metadata": {},
          "execution_count": 285
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Labor Costs"
      ],
      "metadata": {
        "id": "P_1kO_cGZxfU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "labor_costs_df = pd.read_excel(\"ProblemInputs.xlsx\", sheet_name='LABOR_COSTS').round(4)\n",
        "labor_costs_df"
      ],
      "metadata": {
        "id": "utrNsB7kqU8a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "918c867c-08b7-4bbc-c3f4-9a38693aab80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  plant      type     1     2       3       4       5\n",
              "0     A   Regular  11.0  11.0  11.550  11.550  11.550\n",
              "1     A  Overtime  16.5  16.5  17.325  17.325  17.325\n",
              "2     B   Regular  11.0  11.0  12.100  12.100  12.100\n",
              "3     B  Overtime  16.5  16.5  18.150  18.150  18.150"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-29635536-192c-4fc0-ad4d-3fe0de376cbb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>plant</th>\n",
              "      <th>type</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A</td>\n",
              "      <td>Regular</td>\n",
              "      <td>11.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>11.550</td>\n",
              "      <td>11.550</td>\n",
              "      <td>11.550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A</td>\n",
              "      <td>Overtime</td>\n",
              "      <td>16.5</td>\n",
              "      <td>16.5</td>\n",
              "      <td>17.325</td>\n",
              "      <td>17.325</td>\n",
              "      <td>17.325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>B</td>\n",
              "      <td>Regular</td>\n",
              "      <td>11.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>12.100</td>\n",
              "      <td>12.100</td>\n",
              "      <td>12.100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>B</td>\n",
              "      <td>Overtime</td>\n",
              "      <td>16.5</td>\n",
              "      <td>16.5</td>\n",
              "      <td>18.150</td>\n",
              "      <td>18.150</td>\n",
              "      <td>18.150</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-29635536-192c-4fc0-ad4d-3fe0de376cbb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-29635536-192c-4fc0-ad4d-3fe0de376cbb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-29635536-192c-4fc0-ad4d-3fe0de376cbb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 286
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "labor_costs_dict = {}\n",
        "for plant_type_index, cost_dict in labor_costs_df.set_index(['plant', 'type']).to_dict('index').items():\n",
        "  curr_plant, curr_type = plant_type_index\n",
        "  if curr_plant not in labor_costs_dict:\n",
        "    labor_costs_dict[curr_plant] = {}\n",
        "  labor_costs_dict[curr_plant][curr_type] = cost_dict\n",
        "pprint(labor_costs_dict)"
      ],
      "metadata": {
        "id": "X0yvj8QwqfgG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9ed0e405-4368-4f86-845d-91a46b6a5dd0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'A': {'Overtime': {1: 16.5, 2: 16.5, 3: 17.325, 4: 17.325, 5: 17.325},\n",
            "       'Regular': {1: 11.0, 2: 11.0, 3: 11.55, 4: 11.55, 5: 11.55}},\n",
            " 'B': {'Overtime': {1: 16.5, 2: 16.5, 3: 18.15, 4: 18.15, 5: 18.15},\n",
            "       'Regular': {1: 11.0, 2: 11.0, 3: 12.1, 4: 12.1, 5: 12.1}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### LP Object Setup\n",
        "\n",
        "This problem has a lot going on, so we are going to break it down into smaller parts. We are trying to maximize the profit of the manufacturing operation. As an equation, we are solving the following:\n",
        "\n",
        "$ \\text{Revenue} - \\text{Expenses}$\n",
        "\n",
        "We can further break down expenses as:\n",
        "\n",
        "$ \\text{Revenue} - \\text{Cost of Marketing} - \\text{Cost of Inventory} - \\text{Cost of Labor} - \\text{Cost of Materials} - \\text{Cost of Transportation}$\n",
        "\n",
        "We will break each part down in it's own section but first, we will set up the problem object in pulp."
      ],
      "metadata": {
        "id": "cYCP3hBODsrK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prob = LpProblem(\"Manufacturing_Optimization\", LpMaximize)"
      ],
      "metadata": {
        "id": "SUhU7e1f9mwF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problem Variables Creation"
      ],
      "metadata": {
        "id": "i6ye-ywfIBRU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Revenue Variables\n",
        "The only way to generate revenue is to produce and sell items. The transportation variables will be used to calcualte the total revenue, however production variables are still required to ensure that we are make the items we plan to sell.  We will need a total of 30 variables for number of items produced of each kind, in each period, and at each plant ($3 \\times 5 \\times 2$). "
      ],
      "metadata": {
        "id": "Yef4JpHe_Lo7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "production_vars_dict = {}\n",
        "for curr_plant in PLANTS:\n",
        "  production_vars_dict[curr_plant] = {}\n",
        "  for curr_item in ITEMS:\n",
        "    production_vars_dict[curr_plant][curr_item] = {}\n",
        "    for curr_period in PERIODS:\n",
        "      production_vars_dict[curr_plant][curr_item][curr_period] = LpVariable(f\"{curr_item} produced at plant {curr_plant} in period {curr_period}\", 0, None)\n",
        "pprint(production_vars_dict)"
      ],
      "metadata": {
        "id": "O-Z1j7t_AX1R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0d37b747-ac34-4adf-9bb5-dc1c0275a120"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'A': {'Flugels': {1: Flugels_produced_at_plant_A_in_period_1,\n",
            "                   2: Flugels_produced_at_plant_A_in_period_2,\n",
            "                   3: Flugels_produced_at_plant_A_in_period_3,\n",
            "                   4: Flugels_produced_at_plant_A_in_period_4,\n",
            "                   5: Flugels_produced_at_plant_A_in_period_5},\n",
            "       'Gadgets': {1: Gadgets_produced_at_plant_A_in_period_1,\n",
            "                   2: Gadgets_produced_at_plant_A_in_period_2,\n",
            "                   3: Gadgets_produced_at_plant_A_in_period_3,\n",
            "                   4: Gadgets_produced_at_plant_A_in_period_4,\n",
            "                   5: Gadgets_produced_at_plant_A_in_period_5},\n",
            "       'Widgets': {1: Widgets_produced_at_plant_A_in_period_1,\n",
            "                   2: Widgets_produced_at_plant_A_in_period_2,\n",
            "                   3: Widgets_produced_at_plant_A_in_period_3,\n",
            "                   4: Widgets_produced_at_plant_A_in_period_4,\n",
            "                   5: Widgets_produced_at_plant_A_in_period_5}},\n",
            " 'B': {'Flugels': {1: Flugels_produced_at_plant_B_in_period_1,\n",
            "                   2: Flugels_produced_at_plant_B_in_period_2,\n",
            "                   3: Flugels_produced_at_plant_B_in_period_3,\n",
            "                   4: Flugels_produced_at_plant_B_in_period_4,\n",
            "                   5: Flugels_produced_at_plant_B_in_period_5},\n",
            "       'Gadgets': {1: Gadgets_produced_at_plant_B_in_period_1,\n",
            "                   2: Gadgets_produced_at_plant_B_in_period_2,\n",
            "                   3: Gadgets_produced_at_plant_B_in_period_3,\n",
            "                   4: Gadgets_produced_at_plant_B_in_period_4,\n",
            "                   5: Gadgets_produced_at_plant_B_in_period_5},\n",
            "       'Widgets': {1: Widgets_produced_at_plant_B_in_period_1,\n",
            "                   2: Widgets_produced_at_plant_B_in_period_2,\n",
            "                   3: Widgets_produced_at_plant_B_in_period_3,\n",
            "                   4: Widgets_produced_at_plant_B_in_period_4,\n",
            "                   5: Widgets_produced_at_plant_B_in_period_5}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are several constraints on revenue including materials, labor, and inventory. We will be dealing with these in the associated expense sections once the expense variables have been defined. There is one other key point to notice about the production variables. It is unclear if an item produced in a period is sold immediately or put into inventory to sell in a future period. One might assume that we need additional varaibles to track the number of items sold. For our setup, we will use the count of items transportated to the distribution center both for transportation expenses and sales."
      ],
      "metadata": {
        "id": "oDf9EIsxCrLL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Marketing Variables\n",
        "\n",
        "We will begin with marketing as it is the only expense that can increase revenue instead of simply limiting it. The first insight is that we will only have a marketing budget for the first four periods as marketing in the current period affects demand in the next. Despite the fact that we cannot increase demand in the first period with marketing, we will still create a variable for the increase in demand in the first period and set the upper (and lower) limit of the variable to zero. This makes the code simpler in a few places. Notice that constraint in the variable creation line of the following cell. "
      ],
      "metadata": {
        "id": "fzjPVo0Z3hVb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "marketing_vars_dict = {}\n",
        "for curr_item in ITEMS:\n",
        "  marketing_vars_dict[curr_item] = {}\n",
        "  for curr_period in PERIODS:\n",
        "    marketing_vars_dict[curr_item][curr_period] = LpVariable(f\"{curr_item} sold in period {curr_period} from marketing in period {curr_period - 1}\", 0, 0 if curr_period == 1 else None)\n",
        "pprint(marketing_vars_dict)"
      ],
      "metadata": {
        "id": "yzuhh6pW8LO-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "35613dd4-4387-4ad0-b341-568725f05578"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Flugels': {1: Flugels_sold_in_period_1_from_marketing_in_period_0,\n",
            "             2: Flugels_sold_in_period_2_from_marketing_in_period_1,\n",
            "             3: Flugels_sold_in_period_3_from_marketing_in_period_2,\n",
            "             4: Flugels_sold_in_period_4_from_marketing_in_period_3,\n",
            "             5: Flugels_sold_in_period_5_from_marketing_in_period_4},\n",
            " 'Gadgets': {1: Gadgets_sold_in_period_1_from_marketing_in_period_0,\n",
            "             2: Gadgets_sold_in_period_2_from_marketing_in_period_1,\n",
            "             3: Gadgets_sold_in_period_3_from_marketing_in_period_2,\n",
            "             4: Gadgets_sold_in_period_4_from_marketing_in_period_3,\n",
            "             5: Gadgets_sold_in_period_5_from_marketing_in_period_4},\n",
            " 'Widgets': {1: Widgets_sold_in_period_1_from_marketing_in_period_0,\n",
            "             2: Widgets_sold_in_period_2_from_marketing_in_period_1,\n",
            "             3: Widgets_sold_in_period_3_from_marketing_in_period_2,\n",
            "             4: Widgets_sold_in_period_4_from_marketing_in_period_3,\n",
            "             5: Widgets_sold_in_period_5_from_marketing_in_period_4}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Transportation Variables\n",
        "\n",
        "The company must transport their finished products from the plants to the distribution centers. These variables will double as the sales variables. We will need an additional 30 variables. One for each combination of plant, item, and period."
      ],
      "metadata": {
        "id": "Rlo_n2VYDqMg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "transportation_vars_dict = {}\n",
        "for curr_plant in PLANTS:\n",
        "  transportation_vars_dict[curr_plant] = {}\n",
        "  for curr_item in ITEMS:\n",
        "    transportation_vars_dict[curr_plant][curr_item] = {}\n",
        "    for curr_period in PERIODS:\n",
        "      transportation_vars_dict[curr_plant][curr_item][curr_period] = LpVariable(f\"{curr_item} transported from plant {curr_plant} in period {curr_period}\", 0, None)\n",
        "pprint(transportation_vars_dict)"
      ],
      "metadata": {
        "id": "gcqvmPR7Gagm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a1c0d3a3-ea00-435d-9718-180f2bd7a920"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'A': {'Flugels': {1: Flugels_transported_from_plant_A_in_period_1,\n",
            "                   2: Flugels_transported_from_plant_A_in_period_2,\n",
            "                   3: Flugels_transported_from_plant_A_in_period_3,\n",
            "                   4: Flugels_transported_from_plant_A_in_period_4,\n",
            "                   5: Flugels_transported_from_plant_A_in_period_5},\n",
            "       'Gadgets': {1: Gadgets_transported_from_plant_A_in_period_1,\n",
            "                   2: Gadgets_transported_from_plant_A_in_period_2,\n",
            "                   3: Gadgets_transported_from_plant_A_in_period_3,\n",
            "                   4: Gadgets_transported_from_plant_A_in_period_4,\n",
            "                   5: Gadgets_transported_from_plant_A_in_period_5},\n",
            "       'Widgets': {1: Widgets_transported_from_plant_A_in_period_1,\n",
            "                   2: Widgets_transported_from_plant_A_in_period_2,\n",
            "                   3: Widgets_transported_from_plant_A_in_period_3,\n",
            "                   4: Widgets_transported_from_plant_A_in_period_4,\n",
            "                   5: Widgets_transported_from_plant_A_in_period_5}},\n",
            " 'B': {'Flugels': {1: Flugels_transported_from_plant_B_in_period_1,\n",
            "                   2: Flugels_transported_from_plant_B_in_period_2,\n",
            "                   3: Flugels_transported_from_plant_B_in_period_3,\n",
            "                   4: Flugels_transported_from_plant_B_in_period_4,\n",
            "                   5: Flugels_transported_from_plant_B_in_period_5},\n",
            "       'Gadgets': {1: Gadgets_transported_from_plant_B_in_period_1,\n",
            "                   2: Gadgets_transported_from_plant_B_in_period_2,\n",
            "                   3: Gadgets_transported_from_plant_B_in_period_3,\n",
            "                   4: Gadgets_transported_from_plant_B_in_period_4,\n",
            "                   5: Gadgets_transported_from_plant_B_in_period_5},\n",
            "       'Widgets': {1: Widgets_transported_from_plant_B_in_period_1,\n",
            "                   2: Widgets_transported_from_plant_B_in_period_2,\n",
            "                   3: Widgets_transported_from_plant_B_in_period_3,\n",
            "                   4: Widgets_transported_from_plant_B_in_period_4,\n",
            "                   5: Widgets_transported_from_plant_B_in_period_5}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Labor Variables\n",
        "\n",
        "Labor is measured by plant, period, and by regular hours and overtime hours. We will need 20 total variables for labor."
      ],
      "metadata": {
        "id": "Bu2GBxydHzA0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "labor_vars_dict = {}\n",
        "for curr_plant in PLANTS:\n",
        "  labor_vars_dict[curr_plant] = {}\n",
        "  for curr_period in PERIODS:\n",
        "    labor_vars_dict[curr_plant][curr_period] = {}\n",
        "    for curr_labor_type in LABOR_TYPES:\n",
        "      # some labor hour variables have an upper limit\n",
        "      if curr_labor_type == \"Regular\":\n",
        "        var_upper_limit = LABOR_LIMITS[curr_plant]\n",
        "      else:\n",
        "        var_upper_limit = None\n",
        "      labor_vars_dict[curr_plant][curr_period][curr_labor_type] = LpVariable(f\"{curr_labor_type} labor hours in plant {curr_plant} in period {curr_period}\", 0, var_upper_limit)\n",
        "pprint(labor_vars_dict)"
      ],
      "metadata": {
        "id": "oEr0FReFIjzZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6af9aa96-f86b-447f-f1b4-bfd1bbc42987"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'A': {1: {'Overtime': Overtime_labor_hours_in_plant_A_in_period_1,\n",
            "           'Regular': Regular_labor_hours_in_plant_A_in_period_1},\n",
            "       2: {'Overtime': Overtime_labor_hours_in_plant_A_in_period_2,\n",
            "           'Regular': Regular_labor_hours_in_plant_A_in_period_2},\n",
            "       3: {'Overtime': Overtime_labor_hours_in_plant_A_in_period_3,\n",
            "           'Regular': Regular_labor_hours_in_plant_A_in_period_3},\n",
            "       4: {'Overtime': Overtime_labor_hours_in_plant_A_in_period_4,\n",
            "           'Regular': Regular_labor_hours_in_plant_A_in_period_4},\n",
            "       5: {'Overtime': Overtime_labor_hours_in_plant_A_in_period_5,\n",
            "           'Regular': Regular_labor_hours_in_plant_A_in_period_5}},\n",
            " 'B': {1: {'Overtime': Overtime_labor_hours_in_plant_B_in_period_1,\n",
            "           'Regular': Regular_labor_hours_in_plant_B_in_period_1},\n",
            "       2: {'Overtime': Overtime_labor_hours_in_plant_B_in_period_2,\n",
            "           'Regular': Regular_labor_hours_in_plant_B_in_period_2},\n",
            "       3: {'Overtime': Overtime_labor_hours_in_plant_B_in_period_3,\n",
            "           'Regular': Regular_labor_hours_in_plant_B_in_period_3},\n",
            "       4: {'Overtime': Overtime_labor_hours_in_plant_B_in_period_4,\n",
            "           'Regular': Regular_labor_hours_in_plant_B_in_period_4},\n",
            "       5: {'Overtime': Overtime_labor_hours_in_plant_B_in_period_5,\n",
            "           'Regular': Regular_labor_hours_in_plant_B_in_period_5}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Materials Variables\n",
        "\n",
        "There are two material inputs into the items, material 1 and material 2, which need to be shipped to each plant. This will require an additional 20 variables.\n"
      ],
      "metadata": {
        "id": "CltE6ICoJCpD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "materials_vars_dict = {}\n",
        "for curr_plant in PLANTS:\n",
        "  materials_vars_dict[curr_plant] = {}\n",
        "  for curr_period in PERIODS:\n",
        "    materials_vars_dict[curr_plant][curr_period] = {}\n",
        "    for curr_material_type in MATERIAL_TYPES:\n",
        "      materials_vars_dict[curr_plant][curr_period][curr_material_type] = LpVariable(f\"Pounds of {curr_material_type} shipped to plant {curr_plant} in period {curr_period}\", 0, None)\n",
        "pprint(materials_vars_dict)"
      ],
      "metadata": {
        "id": "A_M3WWqoJ_fx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7de6d096-2e97-4c5d-f290-91d09081414a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'A': {1: {'Material 1': Pounds_of_Material_1_shipped_to_plant_A_in_period_1,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_A_in_period_1},\n",
            "       2: {'Material 1': Pounds_of_Material_1_shipped_to_plant_A_in_period_2,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_A_in_period_2},\n",
            "       3: {'Material 1': Pounds_of_Material_1_shipped_to_plant_A_in_period_3,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_A_in_period_3},\n",
            "       4: {'Material 1': Pounds_of_Material_1_shipped_to_plant_A_in_period_4,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_A_in_period_4},\n",
            "       5: {'Material 1': Pounds_of_Material_1_shipped_to_plant_A_in_period_5,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_A_in_period_5}},\n",
            " 'B': {1: {'Material 1': Pounds_of_Material_1_shipped_to_plant_B_in_period_1,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_B_in_period_1},\n",
            "       2: {'Material 1': Pounds_of_Material_1_shipped_to_plant_B_in_period_2,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_B_in_period_2},\n",
            "       3: {'Material 1': Pounds_of_Material_1_shipped_to_plant_B_in_period_3,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_B_in_period_3},\n",
            "       4: {'Material 1': Pounds_of_Material_1_shipped_to_plant_B_in_period_4,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_B_in_period_4},\n",
            "       5: {'Material 1': Pounds_of_Material_1_shipped_to_plant_B_in_period_5,\n",
            "           'Material 2': Pounds_of_Material_2_shipped_to_plant_B_in_period_5}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Inventory Variables\n",
        "\n",
        "We need variables that store the amount of inventory stored at the end of a period for the next period. In the dictionary that stores these variables, I will use the first of the two periods to index the variable. For example, the inventory stored from period 1 to period 2 would be indexed as 1. Despite the fact that there is no inventory at the begining of period 1 and the end of period 5, we will still create accounting inventory variables for these situations and force the variables to be set to zero. This will make the problem setup and interpretation more consistent across periods. "
      ],
      "metadata": {
        "id": "vQBxOdRbLR-I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inventory_vars_dict = {}\n",
        "for curr_plant in PLANTS:\n",
        "  inventory_vars_dict[curr_plant] = {}\n",
        "  for curr_item in ITEMS:\n",
        "    inventory_vars_dict[curr_plant][curr_item] = {}\n",
        "    for curr_period in [0] + PERIODS:\n",
        "      inventory_vars_dict[curr_plant][curr_item][curr_period] = LpVariable(f\"{curr_item} stored from period {curr_period} to {curr_period + 1} at plant {curr_plant}\", 0, 0 if curr_period in [0, 5] else None)\n",
        "pprint(inventory_vars_dict)"
      ],
      "metadata": {
        "id": "BI3DfWY3MqmW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4add1289-6507-4987-95da-5ef893075586"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'A': {'Flugels': {0: Flugels_stored_from_period_0_to_1_at_plant_A,\n",
            "                   1: Flugels_stored_from_period_1_to_2_at_plant_A,\n",
            "                   2: Flugels_stored_from_period_2_to_3_at_plant_A,\n",
            "                   3: Flugels_stored_from_period_3_to_4_at_plant_A,\n",
            "                   4: Flugels_stored_from_period_4_to_5_at_plant_A,\n",
            "                   5: Flugels_stored_from_period_5_to_6_at_plant_A},\n",
            "       'Gadgets': {0: Gadgets_stored_from_period_0_to_1_at_plant_A,\n",
            "                   1: Gadgets_stored_from_period_1_to_2_at_plant_A,\n",
            "                   2: Gadgets_stored_from_period_2_to_3_at_plant_A,\n",
            "                   3: Gadgets_stored_from_period_3_to_4_at_plant_A,\n",
            "                   4: Gadgets_stored_from_period_4_to_5_at_plant_A,\n",
            "                   5: Gadgets_stored_from_period_5_to_6_at_plant_A},\n",
            "       'Widgets': {0: Widgets_stored_from_period_0_to_1_at_plant_A,\n",
            "                   1: Widgets_stored_from_period_1_to_2_at_plant_A,\n",
            "                   2: Widgets_stored_from_period_2_to_3_at_plant_A,\n",
            "                   3: Widgets_stored_from_period_3_to_4_at_plant_A,\n",
            "                   4: Widgets_stored_from_period_4_to_5_at_plant_A,\n",
            "                   5: Widgets_stored_from_period_5_to_6_at_plant_A}},\n",
            " 'B': {'Flugels': {0: Flugels_stored_from_period_0_to_1_at_plant_B,\n",
            "                   1: Flugels_stored_from_period_1_to_2_at_plant_B,\n",
            "                   2: Flugels_stored_from_period_2_to_3_at_plant_B,\n",
            "                   3: Flugels_stored_from_period_3_to_4_at_plant_B,\n",
            "                   4: Flugels_stored_from_period_4_to_5_at_plant_B,\n",
            "                   5: Flugels_stored_from_period_5_to_6_at_plant_B},\n",
            "       'Gadgets': {0: Gadgets_stored_from_period_0_to_1_at_plant_B,\n",
            "                   1: Gadgets_stored_from_period_1_to_2_at_plant_B,\n",
            "                   2: Gadgets_stored_from_period_2_to_3_at_plant_B,\n",
            "                   3: Gadgets_stored_from_period_3_to_4_at_plant_B,\n",
            "                   4: Gadgets_stored_from_period_4_to_5_at_plant_B,\n",
            "                   5: Gadgets_stored_from_period_5_to_6_at_plant_B},\n",
            "       'Widgets': {0: Widgets_stored_from_period_0_to_1_at_plant_B,\n",
            "                   1: Widgets_stored_from_period_1_to_2_at_plant_B,\n",
            "                   2: Widgets_stored_from_period_2_to_3_at_plant_B,\n",
            "                   3: Widgets_stored_from_period_3_to_4_at_plant_B,\n",
            "                   4: Widgets_stored_from_period_4_to_5_at_plant_B,\n",
            "                   5: Widgets_stored_from_period_5_to_6_at_plant_B}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We now have all of the variables that we need to complete this problem. Now we need to defind the constraints, calculate the profit, and solve the problem."
      ],
      "metadata": {
        "id": "QKne9wjJKVS6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Constraints Creation\n",
        "\n",
        "Now that we have all of the variables, it is time to build each of the constraints."
      ],
      "metadata": {
        "id": "UGcCNPRQKgyB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Marketing Budget Constraint\n",
        "The only constraint for marketing spending is that it should not exceed $70,000 for the entire planning period. This can be computed by summing all of the marketing spending variables.\n",
        "\n",
        "As an equation, this contraint is: $\\sum_{i \\in items, t \\in time periods}^{} (\\text{Additional units of demand for item i in time period t}) \\times (\\text{Marketing cost of driving an additional unit of item i}) \\le 70000$ "
      ],
      "metadata": {
        "id": "HjrVYSO895QH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prob += LpConstraint(sum([marketing_vars_dict[item][period] * MARKETING_COST_PER_EXTRA_UNIT[item] for item, period in product(ITEMS, PERIODS)]), rhs= 70_000, sense=LpConstraintLE, name='Marketing Budget Constraint')"
      ],
      "metadata": {
        "id": "RiLmKgdg-Bzq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Materials Constraints\n",
        "\n",
        "The materials constraints are quite simple. Enough material must be shipped to each plan for the required production of all items produced in that period. In addition, we must make sure that we do not plan to purchase more than is available from the supplier."
      ],
      "metadata": {
        "id": "bmGxmlgDG4Nd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "For material 1 and 2, create a constraint that the amount transported to the plant in that period must be greater than or equal to the amount needed for production.\n",
        "\n",
        "For a particular material, plant, and time period, this constraint is: $\\text{Pounds of material shipped the plant} - (\\sum_{i \\in items}^{} \\text{Materials required to produce one item i} \\times \\text{Units of item i produced at the plant}) \\ge 0$ "
      ],
      "metadata": {
        "id": "mgXkjqiCRg7S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_material, curr_period in product(PLANTS, MATERIAL_TYPES, PERIODS):\n",
        "  # in the below constraint, the left hand side is the amount of material purchased and shipped to the plant minus the material used for production in that period at that plant.\n",
        "  material_calc_list = []\n",
        "  for curr_item in ITEMS:\n",
        "    material_calc_list.append(item_costs_dict[curr_plant][curr_item][curr_material] * production_vars_dict[curr_plant][curr_item][curr_period])\n",
        "  prob += LpConstraint(materials_vars_dict[curr_plant][curr_period][curr_material] - sum(material_calc_list), rhs=0, sense=LpConstraintGE, name=f'Plant {curr_plant} {curr_material} requirement in period {curr_period}')"
      ],
      "metadata": {
        "id": "kM31VbZDRKd4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create the constraint imposed by the limited supply of materials available from the supplier.\n",
        "\n",
        "For a particular material in a time period, this constraint is: $\\text{Pounds of material shipped to plant A } + \\text{Pounds of material shipped to plant B } \\le \\text{The limit for the amount of materials available from the supplier}$"
      ],
      "metadata": {
        "id": "7FAko03dnZD9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_material, curr_period in product(MATERIAL_TYPES, PERIODS):\n",
        "  prob += LpConstraint(materials_vars_dict['A'][curr_period][curr_material] + materials_vars_dict['B'][curr_period][curr_material], rhs=MATERIALS_LIMITS[curr_material], sense=LpConstraintLE, name=f'Purchase limit for {curr_material} in period {curr_period}')"
      ],
      "metadata": {
        "id": "XkeLL_wvnfiY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Labor Constraints\n",
        "\n",
        "This constraint is very similar to the materials constraint. We need to ensure we have enough labor hours to create the planned production at each plant in each period. \n",
        "\n",
        "As an equation, this constraint is for a particular plant in a particular time period: $(\\sum_{\\forall labor types}^{} \\text{The number of labor hours available of a certain type}) - (\\sum_{i \\in items}^{} \\text{Number of items i produced} \\times \\text{Labor hours required to produce one unit of item i}) \\ge 0$ "
      ],
      "metadata": {
        "id": "rKEtTCVOWslX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_period in product(PLANTS, PERIODS):\n",
        "      # in the below constraint, the left hand side is the amount of labor hour available minus the amount of labor hours requred for production, which must be greater than 0\n",
        "      labor_calc_list = []\n",
        "      for curr_item in ITEMS:\n",
        "        labor_calc_list.append(item_costs_dict[curr_plant][curr_item][\"labor hours\"] * production_vars_dict[curr_plant][curr_item][curr_period])\n",
        "      prob += LpConstraint(sum(labor_vars_dict[curr_plant][curr_period].values()) - sum(labor_calc_list), rhs=0, sense=LpConstraintGE, name=f'Plant {curr_plant} labor hours requirement in period {curr_period}')"
      ],
      "metadata": {
        "id": "_xpUt42KX0jZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Inventory Limits\n",
        "\n",
        "We need to build constraints that any unsold items at the end of the period must be stored in inventory, which has an associated cost and limit. We also need to create constraints that the inventory does not exceed the available space. This could not be done in the variable declaration because the inventory is for the combination of all items. \n",
        "\n",
        "For a particular plant in a particular time period, this constraint is:  \n",
        "$\\sum_{items} \\text{Number of items in inventory} \\le \\text{Inventory Limit}$"
      ],
      "metadata": {
        "id": "RMtOz56eZ6GL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_period in product(PLANTS, PERIODS):\n",
        "  # in the below constraint, the left hand side is the amount number of items in the given period that are carried to the next. The right hand side is the inventory capacity for that plant\n",
        "  inventory_calc_list = []\n",
        "  for curr_item in ITEMS:\n",
        "    inventory_calc_list.append(inventory_vars_dict[curr_plant][curr_item][curr_period])\n",
        "  prob += LpConstraint(sum(inventory_calc_list), rhs=INVENTORY_LIMITS[curr_plant], sense=LpConstraintLE, name=f'Plant {curr_plant} inventory capcaity limit for items stored from {curr_period} to {curr_period + 1}')"
      ],
      "metadata": {
        "id": "UdEcMw58bh6R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "And now set up the equality constraint that $\\text{Starting Inventory} + \\text{Produced in Period} - \\text{Shipped to Distribution} - \\text{Ending Inventory} = 0$"
      ],
      "metadata": {
        "id": "9cXiwYB7cqo0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_item, curr_period in product(PLANTS, ITEMS, PERIODS):\n",
        "  # in the below constraint, the left hand side is the number of items in the given period that are carried to the next. The right hand side is the inventory capacity for that plant\n",
        "  prob += LpConstraint(\n",
        "    # inventory from the prior period\n",
        "    inventory_vars_dict[curr_plant][curr_item][curr_period - 1]\n",
        "    # plus production in the current period\n",
        "    + production_vars_dict[curr_plant][curr_item][curr_period]\n",
        "    # minus items shipped for sale in the current period\n",
        "    - transportation_vars_dict[curr_plant][curr_item][curr_period]\n",
        "    # minus the inventory at the end of the period\n",
        "    - inventory_vars_dict[curr_plant][curr_item][curr_period]\n",
        "  , rhs=0, sense=LpConstraintEQ, name=f'Plant {curr_plant} period {curr_period} inventory transportation and production logical requirement for {curr_item}')"
      ],
      "metadata": {
        "id": "hEMtpi8cc94g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Production Constraints\n",
        "\n",
        "Most of the above constraints apply to production variables, so most of the production constraints are already set. For example, we already know that we will not plan production above the availability of labor, inventory, or materials. We still need to set the limits of production caused by demand. I am making an assumption here that we must meet demand, even if the final widget produced is unprofitable. Due to this, I am going to create equality constraints that calculate the demand given the already constracted purchases and the extra demand from marketing. To force the inventory and production to be adequate for sales, I will set shipments equal to demand.\n",
        "\n",
        "As an equation, in a particular time period, and for a particular item, this constraint is:   \n",
        "$\\text{Items transported to distribution from plant A} + \\text{Items transported to distribution from plant B} - \\text{Base demand} - \\text{Demand from marketing} = 0$"
      ],
      "metadata": {
        "id": "Ib8ejz_eexY0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_item, curr_period in product(ITEMS, PERIODS):\n",
        "  # Left side is shipments to distribution minus the demand from presales and marketing, which should equal 0\n",
        "  prob += LpConstraint(\n",
        "              # The number of items sold from plant A in the period\n",
        "              transportation_vars_dict['A'][curr_item][curr_period]\n",
        "              # the number of items sold from plant B in the period \n",
        "              + transportation_vars_dict['B'][curr_item][curr_period] \n",
        "              # the demand that is already anticipated outside marketing\n",
        "              - demand_requirements_dict[curr_item][curr_period] \n",
        "              # the demand from marketing in the previous period\n",
        "              - marketing_vars_dict[curr_item][curr_period]\n",
        "          , rhs=0, sense=LpConstraintEQ, name=f'Demand for {curr_item} in period {curr_period}')\n"
      ],
      "metadata": {
        "id": "VJjkAt82fI-4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We now have all of the constraints needed to optomize the problem."
      ],
      "metadata": {
        "id": "wkO2xiI6l4bY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Objection Function Creation\n",
        "\n",
        "The objective function for this problem will be quite complicated.  We are going to create a list of terms that will eventually all be summed together in the problem objective function creation.\n",
        "\n",
        "The equation boils down to:\n",
        "\n",
        "$ \\text{Revenue} - \\text{Cost of Marketing} - \\text{Cost of Inventory} - \\text{Cost of Labor} - \\text{Cost of Materials} - \\text{Cost of Transportation}$"
      ],
      "metadata": {
        "id": "-NpY-u-Hl-SP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "objective_function_terms = []"
      ],
      "metadata": {
        "id": "6pET-ZFGmQYm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Revenue\n",
        "\n",
        "Revenue can be calculated using the number of items shipped to the distribution center in each period."
      ],
      "metadata": {
        "id": "vhqrL_qwkh0S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_item, curr_period in product(PLANTS, ITEMS, PERIODS):\n",
        "  # the following line is the number of items sent to distribution (and therefore sold) times the sales price for that item\n",
        "  objective_function_terms.append(transportation_vars_dict[curr_plant][curr_item][curr_period] * SALES_PRICES[curr_item])"
      ],
      "metadata": {
        "id": "vc5Tu7Ask5Ps"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cost of Marketing\n",
        "\n",
        "The cost of marketing is quite straight forward to calculate. We already have the number of item sales driven by marketing and the cost of driving a sale for each item. Notice that from here on out we are subtracting the amounts as these are expenses."
      ],
      "metadata": {
        "id": "ovXiBjhslt6L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_item, curr_period in product(ITEMS, PERIODS):\n",
        "  objective_function_terms.append(-1 * marketing_vars_dict[curr_item][curr_period] * MARKETING_COST_PER_EXTRA_UNIT[item])"
      ],
      "metadata": {
        "id": "vbJR24dgl9uQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cost of Inventory\n",
        "\n",
        "Inventory has a cost in each facility, which must be subtracted from revenue."
      ],
      "metadata": {
        "id": "n-KXRR5jm2pi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_item, curr_period in product(PLANTS, ITEMS, PERIODS):\n",
        "  objective_function_terms.append(-1 * item_costs_dict[curr_plant][curr_item]['inventory cost'] * inventory_vars_dict[curr_plant][curr_item][curr_period])"
      ],
      "metadata": {
        "id": "AwPsXyVYm9uQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cost of Labor\n",
        "\n",
        "The cost of labor is the number of each labor hours used times the cost of that labor type. The labor costs are stored in the input Excel file."
      ],
      "metadata": {
        "id": "V4CUQfWDqLfQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now calculate the labor cost of production."
      ],
      "metadata": {
        "id": "dY7hvYryrqC6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_period, curr_type in product(PLANTS, PERIODS, LABOR_TYPES):\n",
        "  objective_function_terms.append(-1 * labor_costs_dict[curr_plant][curr_type][curr_period] * labor_vars_dict[curr_plant][curr_period][curr_type]) "
      ],
      "metadata": {
        "id": "judKLzEHrs_r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cost of Materials\n",
        "\n",
        "Calculate the cost of materials purchased and shipped to the plants."
      ],
      "metadata": {
        "id": "RIwIn21GtVhn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_period, curr_material in product(PLANTS, PERIODS, MATERIAL_TYPES):\n",
        "  objective_function_terms.append(-1 * MATERIAL_COSTS[curr_plant][curr_material] * materials_vars_dict[curr_plant][curr_period][curr_material]) "
      ],
      "metadata": {
        "id": "zig6Fd1ktkb9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cost of Transportation\n",
        "\n",
        "We need to calculate the cost of transporting the finished product to the distribution center for each plant and period."
      ],
      "metadata": {
        "id": "8yFZCtSQvBwA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for curr_plant, curr_item, curr_period in product(PLANTS, ITEMS, PERIODS):\n",
        "  objective_function_terms.append(-1 * item_costs_dict[curr_plant][curr_item]['transportation cost'] * transportation_vars_dict[curr_plant][curr_item][curr_period])"
      ],
      "metadata": {
        "id": "uSCpQ4WHvT7R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The objective function now has all of it's terms. We are ready to combine them into the actual function."
      ],
      "metadata": {
        "id": "v2wrnBIxv-hC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prob += sum(objective_function_terms)"
      ],
      "metadata": {
        "id": "H3wkz5DbwEqj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Optimization\n",
        "\n",
        "We finally have all variables, constraints, and the objective function set up. We are ready to optimize."
      ],
      "metadata": {
        "id": "hHBSn2TBv1De"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prob.writeLP(\"Manufacturing_Optimization.lp\")\n",
        "status = prob.solve(GLPK(options=['--ranges', 'manufacturing_plan_sensitivity.sen']))\n",
        "print(LpStatus[status])\n",
        "assert(LpStatus[status] == \"Optimal\")"
      ],
      "metadata": {
        "id": "yz6nzXIdwM_7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "69d2c096-7bc1-4513-8843-122a91ba6575"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Output\n",
        "\n",
        "Now that we have an optimized problem, output the optimal solution"
      ],
      "metadata": {
        "id": "F3lnV-TFMJgP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# print the results\n",
        "print(\"Optimal Operations Plan:\\n\")\n",
        "for curr_var in [x for x in prob.variables() if x.name != \"__dummy\"]:\n",
        "    print(f\"{curr_var.name.replace('_', ' ')}: {round(curr_var.varValue, 1)}\")\n",
        "\n",
        "print(\"\\n\" + f\"Maximum Profit: ${'{:,.2f}'.format(value(prob.objective))}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eZcB2brHMIme",
        "outputId": "f4389cf8-f228-419b-9f3d-7f7441691f22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal Operations Plan:\n",
            "\n",
            "Flugels produced at plant A in period 1: 0.0\n",
            "Flugels produced at plant A in period 2: 0.0\n",
            "Flugels produced at plant A in period 3: 0.0\n",
            "Flugels produced at plant A in period 4: 0.0\n",
            "Flugels produced at plant A in period 5: 0.0\n",
            "Flugels produced at plant B in period 1: 140.0\n",
            "Flugels produced at plant B in period 2: 356.5\n",
            "Flugels produced at plant B in period 3: 301.9\n",
            "Flugels produced at plant B in period 4: 279.1\n",
            "Flugels produced at plant B in period 5: 274.7\n",
            "Flugels sold in period 1 from marketing in period 0: 0.0\n",
            "Flugels sold in period 2 from marketing in period 1: 181.5\n",
            "Flugels sold in period 3 from marketing in period 2: 96.9\n",
            "Flugels sold in period 4 from marketing in period 3: 44.1\n",
            "Flugels sold in period 5 from marketing in period 4: 44.7\n",
            "Flugels stored from period 0 to 1 at plant A: 0.0\n",
            "Flugels stored from period 0 to 1 at plant B: 0.0\n",
            "Flugels stored from period 1 to 2 at plant A: 0.0\n",
            "Flugels stored from period 1 to 2 at plant B: 0.0\n",
            "Flugels stored from period 2 to 3 at plant A: 0.0\n",
            "Flugels stored from period 2 to 3 at plant B: 0.0\n",
            "Flugels stored from period 3 to 4 at plant A: 0.0\n",
            "Flugels stored from period 3 to 4 at plant B: 0.0\n",
            "Flugels stored from period 4 to 5 at plant A: 0.0\n",
            "Flugels stored from period 4 to 5 at plant B: 0.0\n",
            "Flugels stored from period 5 to 6 at plant A: 0.0\n",
            "Flugels stored from period 5 to 6 at plant B: 0.0\n",
            "Flugels transported from plant A in period 1: 0.0\n",
            "Flugels transported from plant A in period 2: 0.0\n",
            "Flugels transported from plant A in period 3: 0.0\n",
            "Flugels transported from plant A in period 4: 0.0\n",
            "Flugels transported from plant A in period 5: 0.0\n",
            "Flugels transported from plant B in period 1: 140.0\n",
            "Flugels transported from plant B in period 2: 356.5\n",
            "Flugels transported from plant B in period 3: 301.9\n",
            "Flugels transported from plant B in period 4: 279.1\n",
            "Flugels transported from plant B in period 5: 274.7\n",
            "Gadgets produced at plant A in period 1: 270.0\n",
            "Gadgets produced at plant A in period 2: 243.0\n",
            "Gadgets produced at plant A in period 3: 232.0\n",
            "Gadgets produced at plant A in period 4: 245.0\n",
            "Gadgets produced at plant A in period 5: 240.0\n",
            "Gadgets produced at plant B in period 1: 50.0\n",
            "Gadgets produced at plant B in period 2: 0.0\n",
            "Gadgets produced at plant B in period 3: 0.0\n",
            "Gadgets produced at plant B in period 4: 0.0\n",
            "Gadgets produced at plant B in period 5: 0.0\n",
            "Gadgets sold in period 1 from marketing in period 0: 0.0\n",
            "Gadgets sold in period 2 from marketing in period 1: 0.0\n",
            "Gadgets sold in period 3 from marketing in period 2: 0.0\n",
            "Gadgets sold in period 4 from marketing in period 3: 0.0\n",
            "Gadgets sold in period 5 from marketing in period 4: 0.0\n",
            "Gadgets stored from period 0 to 1 at plant A: 0.0\n",
            "Gadgets stored from period 0 to 1 at plant B: 0.0\n",
            "Gadgets stored from period 1 to 2 at plant A: 70.0\n",
            "Gadgets stored from period 1 to 2 at plant B: 50.0\n",
            "Gadgets stored from period 2 to 3 at plant A: 63.0\n",
            "Gadgets stored from period 2 to 3 at plant B: 0.0\n",
            "Gadgets stored from period 3 to 4 at plant A: 0.0\n",
            "Gadgets stored from period 3 to 4 at plant B: 0.0\n",
            "Gadgets stored from period 4 to 5 at plant A: 0.0\n",
            "Gadgets stored from period 4 to 5 at plant B: 0.0\n",
            "Gadgets stored from period 5 to 6 at plant A: 0.0\n",
            "Gadgets stored from period 5 to 6 at plant B: 0.0\n",
            "Gadgets transported from plant A in period 1: 200.0\n",
            "Gadgets transported from plant A in period 2: 250.0\n",
            "Gadgets transported from plant A in period 3: 295.0\n",
            "Gadgets transported from plant A in period 4: 245.0\n",
            "Gadgets transported from plant A in period 5: 240.0\n",
            "Gadgets transported from plant B in period 1: 0.0\n",
            "Gadgets transported from plant B in period 2: 50.0\n",
            "Gadgets transported from plant B in period 3: 0.0\n",
            "Gadgets transported from plant B in period 4: 0.0\n",
            "Gadgets transported from plant B in period 5: 0.0\n",
            "Overtime labor hours in plant A in period 1: 0.0\n",
            "Overtime labor hours in plant A in period 2: 0.0\n",
            "Overtime labor hours in plant A in period 3: 0.0\n",
            "Overtime labor hours in plant A in period 4: 0.0\n",
            "Overtime labor hours in plant A in period 5: 0.0\n",
            "Overtime labor hours in plant B in period 1: 0.0\n",
            "Overtime labor hours in plant B in period 2: 1116.2\n",
            "Overtime labor hours in plant B in period 3: 266.9\n",
            "Overtime labor hours in plant B in period 4: 159.1\n",
            "Overtime labor hours in plant B in period 5: 169.2\n",
            "Pounds of Material 1 shipped to plant A in period 1: 74005.5\n",
            "Pounds of Material 1 shipped to plant A in period 2: 55898.1\n",
            "Pounds of Material 1 shipped to plant A in period 3: 70772.1\n",
            "Pounds of Material 1 shipped to plant A in period 4: 71880.2\n",
            "Pounds of Material 1 shipped to plant A in period 5: 71455.2\n",
            "Pounds of Material 1 shipped to plant B in period 1: 36672.7\n",
            "Pounds of Material 1 shipped to plant B in period 2: 84101.9\n",
            "Pounds of Material 1 shipped to plant B in period 3: 69227.9\n",
            "Pounds of Material 1 shipped to plant B in period 4: 68119.8\n",
            "Pounds of Material 1 shipped to plant B in period 5: 68544.8\n",
            "Pounds of Material 2 shipped to plant A in period 1: 527.8\n",
            "Pounds of Material 2 shipped to plant A in period 2: 0.0\n",
            "Pounds of Material 2 shipped to plant A in period 3: 772.2\n",
            "Pounds of Material 2 shipped to plant A in period 4: 688.5\n",
            "Pounds of Material 2 shipped to plant A in period 5: 720.6\n",
            "Pounds of Material 2 shipped to plant B in period 1: 1591.4\n",
            "Pounds of Material 2 shipped to plant B in period 2: 5000.0\n",
            "Pounds of Material 2 shipped to plant B in period 3: 4136.8\n",
            "Pounds of Material 2 shipped to plant B in period 4: 4026.0\n",
            "Pounds of Material 2 shipped to plant B in period 5: 4035.8\n",
            "Regular labor hours in plant A in period 1: 2500.0\n",
            "Regular labor hours in plant A in period 2: 1725.5\n",
            "Regular labor hours in plant A in period 3: 2500.0\n",
            "Regular labor hours in plant A in period 4: 2500.0\n",
            "Regular labor hours in plant A in period 5: 2500.0\n",
            "Regular labor hours in plant B in period 1: 1952.5\n",
            "Regular labor hours in plant B in period 2: 3800.0\n",
            "Regular labor hours in plant B in period 3: 3800.0\n",
            "Regular labor hours in plant B in period 4: 3800.0\n",
            "Regular labor hours in plant B in period 5: 3800.0\n",
            "Widgets produced at plant A in period 1: 61.4\n",
            "Widgets produced at plant A in period 2: 0.0\n",
            "Widgets produced at plant A in period 3: 89.8\n",
            "Widgets produced at plant A in period 4: 80.1\n",
            "Widgets produced at plant A in period 5: 83.8\n",
            "Widgets produced at plant B in period 1: 8.6\n",
            "Widgets produced at plant B in period 2: 125.0\n",
            "Widgets produced at plant B in period 3: 95.2\n",
            "Widgets produced at plant B in period 4: 109.9\n",
            "Widgets produced at plant B in period 5: 116.2\n",
            "Widgets sold in period 1 from marketing in period 0: 0.0\n",
            "Widgets sold in period 2 from marketing in period 1: 0.0\n",
            "Widgets sold in period 3 from marketing in period 2: 0.0\n",
            "Widgets sold in period 4 from marketing in period 3: 0.0\n",
            "Widgets sold in period 5 from marketing in period 4: 0.0\n",
            "Widgets stored from period 0 to 1 at plant A: 0.0\n",
            "Widgets stored from period 0 to 1 at plant B: 0.0\n",
            "Widgets stored from period 1 to 2 at plant A: 0.0\n",
            "Widgets stored from period 1 to 2 at plant B: 0.0\n",
            "Widgets stored from period 2 to 3 at plant A: 0.0\n",
            "Widgets stored from period 2 to 3 at plant B: 0.0\n",
            "Widgets stored from period 3 to 4 at plant A: 0.0\n",
            "Widgets stored from period 3 to 4 at plant B: 0.0\n",
            "Widgets stored from period 4 to 5 at plant A: 0.0\n",
            "Widgets stored from period 4 to 5 at plant B: 0.0\n",
            "Widgets stored from period 5 to 6 at plant A: 0.0\n",
            "Widgets stored from period 5 to 6 at plant B: 0.0\n",
            "Widgets transported from plant A in period 1: 61.4\n",
            "Widgets transported from plant A in period 2: 0.0\n",
            "Widgets transported from plant A in period 3: 89.8\n",
            "Widgets transported from plant A in period 4: 80.1\n",
            "Widgets transported from plant A in period 5: 83.8\n",
            "Widgets transported from plant B in period 1: 8.6\n",
            "Widgets transported from plant B in period 2: 125.0\n",
            "Widgets transported from plant B in period 3: 95.2\n",
            "Widgets transported from plant B in period 4: 109.9\n",
            "Widgets transported from plant B in period 5: 116.2\n",
            "\n",
            "Maximum Profit: $7,066,036.94\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def flatten_dict(input_dict, prefix_index=()):\n",
        "  output_dict = {}\n",
        "  for curr_key, curr_val in input_dict.items():\n",
        "    if type(curr_val) == dict:\n",
        "      output_dict.update(flatten_dict(curr_val, prefix_index=prefix_index + (curr_key,)))\n",
        "    else:\n",
        "      output_dict[prefix_index + (curr_key,)] = curr_val\n",
        "  return output_dict\n",
        "\n",
        "def save_table(var_dict, key_labels, column_index, sheet_name, excel_writer, round_to=None):\n",
        "  reform = {key: {'value': value(val)} for key, val in flatten_dict(var_dict).items()}\n",
        "  df = pd.DataFrame().from_dict(reform).T.sort_index()\n",
        "  df.index.names = key_labels\n",
        "  df = pd.pivot_table(df, index=key_labels[:column_index] + key_labels[column_index + 1:], columns=[key_labels[column_index]], values='value', aggfunc='first')\n",
        "  df = df.reset_index()\n",
        "  df.round(round_to).to_excel(excel_writer, sheet_name=sheet_name, index=False)\n",
        "  print(sheet_name)\n",
        "  print(df)\n",
        "  print()\n",
        "  return df\n",
        "  \n",
        "# Save each varible type to it's own tab in an excel workbook.\n",
        "with pd.ExcelWriter(\"ProblemOutput.xlsx\") as writer:\n",
        "  save_table(production_vars_dict,     ('facility', 'item', 'period'),           \n",
        "                2, \"PRODUCTION\", writer, 2)\n",
        "  save_table(marketing_vars_dict,      ('item', 'period'),                      \n",
        "                1, \"MARKETING\", writer, 2)\n",
        "  save_table(transportation_vars_dict, ('facility', 'item', 'period'),          \n",
        "                2, \"TRANSPORTATION\", writer, 2)\n",
        "  save_table(labor_vars_dict,          ('facility', 'period', 'labor_type'),    \n",
        "                1, \"LABOR\", writer, 2)\n",
        "  save_table(materials_vars_dict,      ('facility', 'period', 'material_type'), \n",
        "                1, \"MATERIALS\", writer, 2)\n",
        "  save_table(inventory_vars_dict,      ('facility', 'item', 'period'),          \n",
        "                2, \"INVENTORY\", writer, 2)\n"
      ],
      "metadata": {
        "id": "7ZLhfnjuvIIw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf03b858-27a5-47f4-e763-1d8d7daf4c17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PRODUCTION\n",
            "period facility     item          1        2         3         4         5\n",
            "0             A  Flugels    0.00000    0.000    0.0000    0.0000    0.0000\n",
            "1             A  Gadgets  270.00000  243.035  231.9650  245.0000  240.0000\n",
            "2             A  Widgets   61.36840    0.000   89.7949   80.0526   83.7895\n",
            "3             B  Flugels  140.00000  356.481  301.9380  279.1160  274.6900\n",
            "4             B  Gadgets   50.00000    0.000    0.0000    0.0000    0.0000\n",
            "5             B  Widgets    8.63158  125.000   95.2051  109.9470  116.2110\n",
            "\n",
            "MARKETING\n",
            "period     item    1        2        3        4        5\n",
            "0       Flugels  0.0  181.481  96.9375  44.1158  44.6898\n",
            "1       Gadgets  0.0    0.000   0.0000   0.0000   0.0000\n",
            "2       Widgets  0.0    0.000   0.0000   0.0000   0.0000\n",
            "\n",
            "TRANSPORTATION\n",
            "period facility     item          1        2         3         4         5\n",
            "0             A  Flugels    0.00000    0.000    0.0000    0.0000    0.0000\n",
            "1             A  Gadgets  200.00000  250.000  295.0000  245.0000  240.0000\n",
            "2             A  Widgets   61.36840    0.000   89.7949   80.0526   83.7895\n",
            "3             B  Flugels  140.00000  356.481  301.9380  279.1160  274.6900\n",
            "4             B  Gadgets    0.00000   50.000    0.0000    0.0000    0.0000\n",
            "5             B  Widgets    8.63158  125.000   95.2051  109.9470  116.2110\n",
            "\n",
            "LABOR\n",
            "period facility labor_type        1        2         3         4         5\n",
            "0             A   Overtime     0.00     0.00     0.000     0.000     0.000\n",
            "1             A    Regular  2500.00  1725.55  2500.000  2500.000  2500.000\n",
            "2             B   Overtime     0.00  1116.20   266.904   159.148   169.227\n",
            "3             B    Regular  1952.55  3800.00  3800.000  3800.000  3800.000\n",
            "\n",
            "MATERIALS\n",
            "period facility material_type          1        2          3          4  \\\n",
            "0             A    Material 1  74005.500  55898.1  70772.100  71880.200   \n",
            "1             A    Material 2    527.768      0.0    772.236    688.453   \n",
            "2             B    Material 1  36672.700  84101.9  69227.900  68119.800   \n",
            "3             B    Material 2   1591.410   5000.0   4136.810   4025.970   \n",
            "\n",
            "period          5  \n",
            "0       71455.200  \n",
            "1         720.589  \n",
            "2       68544.800  \n",
            "3        4035.790  \n",
            "\n",
            "INVENTORY\n",
            "period facility     item    0     1        2    3    4    5\n",
            "0             A  Flugels  0.0   0.0   0.0000  0.0  0.0  0.0\n",
            "1             A  Gadgets  0.0  70.0  63.0354  0.0  0.0  0.0\n",
            "2             A  Widgets  0.0   0.0   0.0000  0.0  0.0  0.0\n",
            "3             B  Flugels  0.0   0.0   0.0000  0.0  0.0  0.0\n",
            "4             B  Gadgets  0.0  50.0   0.0000  0.0  0.0  0.0\n",
            "5             B  Widgets  0.0   0.0   0.0000  0.0  0.0  0.0\n",
            "\n"
          ]
        }
      ]
    }
  ]
}